{"version":3,"sources":["../node_modules/shortid/lib/util/cluster-worker-id-browser.js","../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/regex.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/validate.js","../node_modules/uuid/dist/esm-browser/v4.js","redux/actions/create-user.js","components/Form/Form.js","components/Filter/Filter.js","components/ContactList/ContactList.js","view/TodosVIew.js","../node_modules/shortid/lib/alphabet.js","../node_modules/shortid/index.js","../node_modules/shortid/lib/index.js","../node_modules/shortid/lib/random/random-from-seed.js","../node_modules/shortid/lib/build.js","../node_modules/shortid/lib/generate.js","../node_modules/shortid/lib/random/random-byte-browser.js","../node_modules/shortid/node_modules/nanoid/format.browser.js","../node_modules/shortid/lib/is-valid.js"],"names":["module","exports","getRandomValues","rnds8","Uint8Array","rng","crypto","bind","msCrypto","Error","validate","uuid","REGEX","test","byteToHex","i","push","toString","substr","stringify","arr","offset","arguments","length","undefined","toLowerCase","TypeError","v4","options","buf","rnds","random","createAction","user","payload","name","number","id","Form","loginInputId","shortid","generate","numberInputId","objId","state","handleChange","event","setState","unId","currentTarget","value","handleSubmit","e","preventDefault","props","y","reset","onSubmit","this","htmlFor","placeholder","type","onChange","Component","mapDispatchToProps","todosOperations","addTodo","connect","getFilterSelctors","getFilter","dispatch","changeFilter","target","className","onDelete","deleteTodo","allUsers","visibleSelectors","getVisibleContacts","map","onClick","TodoViews","alphabet","previousSeed","shuffled","randomFromSeed","require","ORIGINAL","setCharacters","_alphabet_","unique","split","filter","item","ind","lastIndexOf","join","getShuffled","characterIndex","sourceArray","targetArray","r","nextValue","Math","floor","splice","shuffle","get","characters","seed","lookup","index","build","isValid","clusterWorkerId","seedValue","worker","workerId","newCharacters","_seed_","counter","previousSeconds","str","seconds","Date","now","format","done","loopCounter","pow","randomByte","window","size","bytes","mask","log","LN2","step","RegExp","replace"],"mappings":"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","file":"static/js/3.a4735af7.chunk.js","sourcesContent":["'use strict';\n\nmodule.exports = 0;\n","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","import { number } from \"prop-types\";\r\nimport { createAction } from \"@reduxjs/toolkit\";\r\nconst createUser = createAction(\"actions/create_User\", (user) => {\r\n  return {\r\n    payload: {\r\n      name: user.name,\r\n      number: user.number,\r\n      id: user.id,\r\n    },\r\n  };\r\n});\r\n\r\nexport default createUser;\r\n","import { Component } from \"react\";\r\nimport shortid from \"shortid\";\r\nimport s from \"./Form.module.css\";\r\nimport { v4 as unId } from \"uuid\";\r\n\r\n//todo:\r\nimport { connect } from \"react-redux\";\r\nimport userAction from \"../../redux/actions/create-user\";\r\nimport todosOperations from \"../../redux/actions/todos-operations\";\r\nclass Form extends Component {\r\n  loginInputId = shortid.generate();\r\n  numberInputId = shortid.generate();\r\n  objId = shortid.generate();\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n    id: \"\",\r\n  };\r\n  handleChange = (event) => {\r\n    // console.log(event.currentTarget);\r\n    // console.log(event.currentTarget.name);\r\n    // console.log(event.currentTarget.value);\r\n\r\n    this.setState({\r\n      id: unId(),\r\n      [event.currentTarget.name]: event.currentTarget.value,\r\n    });\r\n  };\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    //todo: редакс передал создание нового юзера\r\n    if (this.state.name !== \"\") {\r\n      this.props.y(this.state);\r\n      this.reset();\r\n      return;\r\n    }\r\n  };\r\n  reset = () => {\r\n    this.setState({ name: \"\", number: \"\" });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <label htmlFor={this.loginInputId}>\r\n          <input\r\n            placeholder=\"Name\"\r\n            name=\"name\"\r\n            type=\"text\"\r\n            value={this.state.name}\r\n            onChange={this.handleChange}\r\n            id={this.loginInputId}\r\n          />\r\n        </label>\r\n\r\n        <label htmlFor={this.numberInputId}>\r\n          <br />\r\n\r\n          <input\r\n            placeholder=\"Number\"\r\n            name=\"number\"\r\n            type=\"text\"\r\n            value={this.state.number}\r\n            onChange={this.handleChange}\r\n            id={this.numberInputId}\r\n          />\r\n        </label>\r\n        <br />\r\n\r\n        <button type=\"submit\">Add contact</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  y: todosOperations.addTodo,\r\n};\r\nexport default connect(null, mapDispatchToProps)(Form);\r\n","import React, { Component } from \"react\";\r\n\r\nimport { changeFilter } from \"../../redux/actions/index\";\r\nimport { connect } from \"react-redux\";\r\nimport getFilterSelctors from \"../../redux/actions/contacts-selectors\";\r\n\r\nconst Filter = ({ value, onChange }) => {\r\n  return (\r\n    <div>\r\n      <label>\r\n        Find contacts by name\r\n        <input\r\n          type=\"text\"\r\n          className=\"TodoFilter__input\"\r\n          value={value}\r\n          onChange={onChange}\r\n        />\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  value: getFilterSelctors.getFilter(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onChange: (e) => dispatch(changeFilter(e.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React from \"react\";\r\nimport { v4 as unId } from \"uuid\";\r\nimport Contacts from \"./Contacts.module.css\";\r\nimport { connect } from \"react-redux\";\r\nimport { todosOperations, visibleSelectors } from \"../../redux/actions/index\";\r\n\r\nconst ContactList = ({ allUsers, onDelete }) => (\r\n  <ul className=\"TodoList\">\r\n    {allUsers.map(({ id, name, number }) => (\r\n      <li key={unId()} className=\"listStyle\">\r\n        <p className=\"TodoList__text\">\r\n          {name}:{number}\r\n        </p>\r\n        <button\r\n          type=\"button\"\r\n          className=\"TodoList__btn\"\r\n          onClick={() => onDelete(id)}\r\n        >\r\n          Remove\r\n        </button>\r\n      </li>\r\n    ))}\r\n  </ul>\r\n);\r\n\r\nconst mapStateToProps = (state) => ({\r\n  allUsers: visibleSelectors.getVisibleContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  onDelete: (id) => todosOperations.deleteTodo(id),\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React, { Component } from \"react\";\r\nimport Form from \"../components/Form/Form\";\r\nimport Filter from \"../components/Filter/Filter\";\r\nimport ContactList from \"../components/ContactList/ContactList\";\r\n\r\nclass TodoViews extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <Form />\r\n        <Filter />\r\n        <ContactList />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoViews;\r\n","'use strict';\n\nvar randomFromSeed = require('./random/random-from-seed');\n\nvar ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';\nvar alphabet;\nvar previousSeed;\n\nvar shuffled;\n\nfunction reset() {\n    shuffled = false;\n}\n\nfunction setCharacters(_alphabet_) {\n    if (!_alphabet_) {\n        if (alphabet !== ORIGINAL) {\n            alphabet = ORIGINAL;\n            reset();\n        }\n        return;\n    }\n\n    if (_alphabet_ === alphabet) {\n        return;\n    }\n\n    if (_alphabet_.length !== ORIGINAL.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);\n    }\n\n    var unique = _alphabet_.split('').filter(function(item, ind, arr){\n       return ind !== arr.lastIndexOf(item);\n    });\n\n    if (unique.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));\n    }\n\n    alphabet = _alphabet_;\n    reset();\n}\n\nfunction characters(_alphabet_) {\n    setCharacters(_alphabet_);\n    return alphabet;\n}\n\nfunction setSeed(seed) {\n    randomFromSeed.seed(seed);\n    if (previousSeed !== seed) {\n        reset();\n        previousSeed = seed;\n    }\n}\n\nfunction shuffle() {\n    if (!alphabet) {\n        setCharacters(ORIGINAL);\n    }\n\n    var sourceArray = alphabet.split('');\n    var targetArray = [];\n    var r = randomFromSeed.nextValue();\n    var characterIndex;\n\n    while (sourceArray.length > 0) {\n        r = randomFromSeed.nextValue();\n        characterIndex = Math.floor(r * sourceArray.length);\n        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);\n    }\n    return targetArray.join('');\n}\n\nfunction getShuffled() {\n    if (shuffled) {\n        return shuffled;\n    }\n    shuffled = shuffle();\n    return shuffled;\n}\n\n/**\n * lookup shuffled letter\n * @param index\n * @returns {string}\n */\nfunction lookup(index) {\n    var alphabetShuffled = getShuffled();\n    return alphabetShuffled[index];\n}\n\nfunction get () {\n  return alphabet || ORIGINAL;\n}\n\nmodule.exports = {\n    get: get,\n    characters: characters,\n    seed: setSeed,\n    lookup: lookup,\n    shuffled: getShuffled\n};\n","'use strict';\nmodule.exports = require('./lib/index');\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n    alphabet.seed(seedValue);\n    return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n    clusterWorkerId = workerId;\n    return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n    if (newCharacters !== undefined) {\n        alphabet.characters(newCharacters);\n    }\n\n    return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;\n","'use strict';\n\n// Found this seed-based random generator somewhere\n// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)\n\nvar seed = 1;\n\n/**\n * return a random number based on a seed\n * @param seed\n * @returns {number}\n */\nfunction getNextValue() {\n    seed = (seed * 9301 + 49297) % 233280;\n    return seed/(233280.0);\n}\n\nfunction setSeed(_seed_) {\n    seed = _seed_;\n}\n\nmodule.exports = {\n    nextValue: getNextValue,\n    seed: setSeed\n};\n","'use strict';\n\nvar generate = require('./generate');\nvar alphabet = require('./alphabet');\n\n// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n// This number should be updated every year or so to keep the generated id short.\n// To regenerate `new Date() - 0` and bump the version. Always bump the version!\nvar REDUCE_TIME = 1567752802062;\n\n// don't change unless we change the algos or REDUCE_TIME\n// must be an integer and less than 16\nvar version = 7;\n\n// Counter is used when shortid is called multiple times in one second.\nvar counter;\n\n// Remember the last time shortid was called in case counter is needed.\nvar previousSeconds;\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction build(clusterWorkerId) {\n    var str = '';\n\n    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\n\n    if (seconds === previousSeconds) {\n        counter++;\n    } else {\n        counter = 0;\n        previousSeconds = seconds;\n    }\n\n    str = str + generate(version);\n    str = str + generate(clusterWorkerId);\n    if (counter > 0) {\n        str = str + generate(counter);\n    }\n    str = str + generate(seconds);\n    return str;\n}\n\nmodule.exports = build;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar random = require('./random/random-byte');\nvar format = require('nanoid/format');\n\nfunction generate(number) {\n    var loopCounter = 0;\n    var done;\n\n    var str = '';\n\n    while (!done) {\n        str = str + format(random, alphabet.get(), 1);\n        done = number < (Math.pow(16, loopCounter + 1 ) );\n        loopCounter++;\n    }\n    return str;\n}\n\nmodule.exports = generate;\n","'use strict';\n\nvar crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto\n\nvar randomByte;\n\nif (!crypto || !crypto.getRandomValues) {\n    randomByte = function(size) {\n        var bytes = [];\n        for (var i = 0; i < size; i++) {\n            bytes.push(Math.floor(Math.random() * 256));\n        }\n        return bytes;\n    };\n} else {\n    randomByte = function(size) {\n        return crypto.getRandomValues(new Uint8Array(size));\n    };\n}\n\nmodule.exports = randomByte;\n","// This file replaces `format.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nmodule.exports = function (random, alphabet, size) {\n  // We can’t use bytes bigger than the alphabet. To make bytes values closer\n  // to the alphabet, we apply bitmask on them. We look for the closest\n  // `2 ** x - 1` number, which will be bigger than alphabet size. If we have\n  // 30 symbols in the alphabet, we will take 31 (00011111).\n  // We do not use faster Math.clz32, because it is not available in browsers.\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\n  // Bitmask is not a perfect solution (in our example it will pass 31 bytes,\n  // which is bigger than the alphabet). As a result, we will need more bytes,\n  // than ID size, because we will refuse bytes bigger than the alphabet.\n\n  // Every hardware random generator call is costly,\n  // because we need to wait for entropy collection. This is why often it will\n  // be faster to ask for few extra bytes in advance, to avoid additional calls.\n\n  // Here we calculate how many random bytes should we call in advance.\n  // It depends on ID length, mask / alphabet size and magic number 1.6\n  // (which was selected according benchmarks).\n\n  // -~f => Math.ceil(f) if n is float number\n  // -~i => i + 1 if n is integer number\n  var step = -~(1.6 * mask * size / alphabet.length)\n  var id = ''\n\n  while (true) {\n    var bytes = random(step)\n    // Compact alternative for `for (var i = 0; i < step; i++)`\n    var i = step\n    while (i--) {\n      // If random byte is bigger than alphabet even after bitmask,\n      // we refuse it by `|| ''`.\n      id += alphabet[bytes[i] & mask] || ''\n      // More compact than `id.length + 1 === size`\n      if (id.length === +size) return id\n    }\n  }\n}\n","'use strict';\nvar alphabet = require('./alphabet');\n\nfunction isShortId(id) {\n    if (!id || typeof id !== 'string' || id.length < 6 ) {\n        return false;\n    }\n\n    var nonAlphabetic = new RegExp('[^' +\n      alphabet.get().replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&') +\n    ']');\n    return !nonAlphabetic.test(id);\n}\n\nmodule.exports = isShortId;\n"],"sourceRoot":""}